{"version":3,"sources":["components/redux/todoReducer.js","components/redux/store.js","components/Task2/Item/Item.js","components/Task2/Task2.js","components/Task2/Task2Container.js","App.js","serviceWorker.js","index.js"],"names":["initialState","message","correction","list","id","isDone","isCorrection","todoReducer","state","action","type","newMessage","length","filter","item","map","reducers","combineReducers","todo","store","createStore","window","Item","props","console","log","className","value","onChange","e","handleCorrection","target","onBlur","correctItem","autoFocus","onDoubleClick","onClick","doneItem","removeItem","Task2","this","addItem","handleChange","key","placeholder","Component","connect","App","Task2Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0c4fb5c0.chunk.js","sourcesContent":["const ADD_ITEM = \"ADD-ITEM\";\r\nconst REMOVE_ITEM = \"REMOVE-ITEM\";\r\nconst DONE_ITEM = \"DONE-ITEM\";\r\nconst CORRECT_ITEM = \"CORRECT-ITEM\";\r\nconst HANDLE_CHANGE = \"HANDLE CHANGE\";\r\nconst HANDLE_CORRECTION = \"HANDLE-CORRECTION\"\r\n\r\nlet initialState = {\r\n    message: '',\r\n    correction: '',\r\n\r\n\r\n\r\n    list: [\r\n        {\r\n            id: 0,\r\n            message: \"Learn JS\",\r\n            isDone: false,\r\n            isCorrection: false,\r\n        },\r\n        {\r\n            id: 1,\r\n            message: \"Learn React\",\r\n            isDone: false,\r\n            isCorrection: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Learn Redux\",\r\n            isDone: false,\r\n            isCorrection: false,\r\n        }\r\n    ]\r\n};\r\nlet todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_ITEM: {\r\n            let newMessage = {\r\n                id: state.list.length,\r\n                message: action.message,\r\n                isDone: false,\r\n                isCorrection: false,\r\n            };\r\n            return {\r\n                ...state,\r\n                message: '',\r\n                list: [...state.list, newMessage]\r\n            }\r\n        }\r\n        case HANDLE_CHANGE: {\r\n            return {\r\n                ...state,\r\n                message: action.message\r\n\r\n            }\r\n        }\r\n        case REMOVE_ITEM: {\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(item => item.id !== action.id)\r\n            }\r\n\r\n        }\r\n        case DONE_ITEM: {\r\n            return {\r\n                ...state,\r\n                list: state.list.map(item => item.id === action.id ? { ...item, isDone: !item.isDone } : item)\r\n            }\r\n        }\r\n        case CORRECT_ITEM: {\r\n\r\n            return {\r\n                ...state,\r\n                // correction: state.message,\r\n                list: state.list.map(item => item.id === action.id ? { ...item, isCorrection: !item.isCorrection } : item)\r\n            }\r\n        }\r\n\r\n        case HANDLE_CORRECTION: {\r\n            return {\r\n                ...state,\r\n                list: state.list.map(item => item.id === action.id ? { ...item, message: action.message } : item)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addItem = (message) => {\r\n    return {\r\n        type: ADD_ITEM,\r\n        message\r\n    }\r\n}\r\n\r\nexport const handleChange = (message) => {\r\n    return {\r\n        type: HANDLE_CHANGE,\r\n        message\r\n    }\r\n}\r\n\r\nexport const removeItem = (id) => {\r\n    return {\r\n        type: REMOVE_ITEM,\r\n        id\r\n    }\r\n\r\n}\r\nexport const doneItem = (id) => {\r\n    return {\r\n        type: DONE_ITEM,\r\n        id\r\n    }\r\n}\r\n\r\nexport const correctItem = (id) => {\r\n    return {\r\n        type: CORRECT_ITEM,\r\n\r\n        id\r\n    }\r\n}\r\n\r\nexport const handleCorrection = (message, id) => {\r\n    return {\r\n        type: HANDLE_CORRECTION,\r\n        message,\r\n        id\r\n    }\r\n}\r\nexport default todoReducer;","import { createStore, combineReducers } from 'redux';\r\nimport todoReducer from './todoReducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    todo: todoReducer\r\n})\r\n\r\nlet store = createStore(reducers);\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\n\r\nimport './Item.scss';\r\n\r\nconst Item = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"Item\">\r\n\r\n            {!props.isCorrection ? (\r\n                <>\r\n                    <div className={props.isDone ? \"messageDone\" : \"message\"}\r\n                        onDoubleClick={() => { props.correctItem(props.id) }}\r\n                    >{props.message}</div>\r\n\r\n                    <div className=\"status\">\r\n                        <div className=\"done\"\r\n                            onClick={() => { props.doneItem(props.id) }}\r\n                        >V</div>\r\n                        <div className=\"delete\"\r\n                            onClick={() => { props.removeItem(props.id) }}\r\n                        >X</div>\r\n\r\n                    </div>\r\n                </>\r\n\r\n            ) : (\r\n                    <div className=\"correction\">\r\n                        <input className=\"correctionInput\"\r\n                            value={props.message}\r\n                            onChange={e => { props.handleCorrection(e.target.value, props.id) }}\r\n                            onBlur={() => { props.correctItem(props.id) }}\r\n                            autoFocus\r\n                        />\r\n                    </div>\r\n\r\n                )}\r\n\r\n\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport './Task2.scss';\r\nimport Item from './Item/Item';\r\n\r\n\r\n\r\nclass Task2 extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        console.log(this.props);\r\n        const { addItem, handleChange, removeItem, doneItem, correctItem, handleCorrection } = this.props;\r\n        const { list, message, isDone, isCorrection, correction } = this.props.todo;\r\n        console.log(list);\r\n\r\n        return (\r\n            <div className=\"Task2\">\r\n                Double click to change item. Blur to save.\r\n                <div className=\"list\">\r\n\r\n                    {list.length > 0 ? list.map((item) =>\r\n                        <Item\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            message={item.message}\r\n                            removeItem={removeItem}\r\n                            isDone={item.isDone}\r\n                            doneItem={doneItem}\r\n                            isCorrection={item.isCorrection}\r\n                            correctItem={correctItem}\r\n                            handleChange={handleChange}\r\n                            correction={correction}\r\n                            handleCorrection={handleCorrection}\r\n\r\n                        />\r\n\r\n\r\n                    ) : null}\r\n\r\n                </div>\r\n\r\n                <div className=\"wrap\">Task\r\n                    <input className=\"input\"\r\n                        placeholder=\"What do you need to do?\"\r\n                        onChange={e => handleChange(e.target.value)}\r\n                        value={message}\r\n                    />\r\n\r\n                    <button className=\"button\"\r\n                        onClick={() => {\r\n                            return (message ?\r\n                                addItem(message) : null)\r\n\r\n                        }\r\n                        }\r\n\r\n\r\n                    >Save item</button>\r\n                </div>\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task2;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addItem, handleChange, removeItem, doneItem, correctItem, handleCorrection } from '../redux/todoReducer';\r\nimport Task2 from './Task2';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todo: state.todo\r\n    }\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        addItem,\r\n        handleChange,\r\n        removeItem,\r\n        doneItem,\r\n        correctItem,\r\n        handleCorrection\r\n    })(Task2);","import React from 'react';\nimport './App.css';\nimport Task2 from './components/Task2/Task2';\nimport Task2Container from './components/Task2/Task2Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>TODO Redux</h1>\n      <Task2Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './components/redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}